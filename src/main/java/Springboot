[O que é o Spring Framework?]
O Spring Framework é um framework de código aberto para desenvolvimento de aplicações Java. Ele facilita a criação de
aplicações empresariais, oferecendo soluções para tarefas comuns, como:

- Gerenciamento de dependências.

- a dados (JDBC, ORM).

- Desenvolvimento de APIs REST.

- Segurança.

- Integração com outros frameworks.

O Spring é modular, ou seja, você pode usar apenas as partes que precisa (como Spring MVC, Spring Data, Spring Security
, etc.).


[Diferenças entre Spring e Java EE]

Java EE (Jakarta EE):

É um conjunto de especificações e APIs padrão para desenvolvimento de aplicações empresariais em Java.

Você precisa de um servidor de aplicação (como WildFly, TomEE) para rodar aplicações Java EE.

Menos flexível, pois segue padrões rígidos.

Spring Framework:

É um framework que implementa muitas funcionalidades sem seguir rigidamente as especificações do Java EE.

Não precisa de um servidor de aplicação completo; pode rodar em servidores leves (como Tomcat) ou até mesmo em
aplicações standalone.

Mais flexível e moderno, com foco em produtividade e simplicidade.


Inversão de Controle (IoC)
A Inversão de Controle é um princípio de design em que o controle do fluxo de execução de um programa é invertido.
 Em vez de o desenvolvedor gerenciar manualmente as dependências e o ciclo de vida dos objetos, o Spring faz isso
  automaticamente.

Exemplo: Em um cenário tradicional, você cria e gerencia objetos manualmente. No Spring, o container do Spring
(o núcleo do framework) cuida disso para você.

public class Servico {
    private Repositorio repositorio;

    // Injeção de dependência via construtor
    public Servico(Repositorio repositorio) {
        this.repositorio = repositorio;
    }
}

(Autowired)
A anotação @Autowired é usada para injetar dependências automaticamente. O Spring encontra o Bean adequado e o injeta
no local correto.

@Service
public class Servico {
    @Autowired
    private Repositorio repositorio; // Injeção automática
}

Scopes (Escopos)
Os escopos definem o ciclo de vida de um Bean. Os mais comuns são:

Singleton: Uma única instância do Bean é criada e compartilhada em toda a aplicação (padrão).

Prototype: Uma nova instância é criada cada vez que o Bean é solicitado.

Request: Uma instância por requisição HTTP (usado em aplicações web).

Session: Uma instância por sessão do usuário (usado em aplicações web).

Exemplo:

@Component
@Scope("prototype")
public class MeuComponente {
    // Lógica do componente
}

Resumo:

Spring Framework: Facilita o desenvolvimento de aplicações Java.

Java EE vs Spring: Spring é mais flexível e moderno.

IoC: O Spring controla o ciclo de vida dos objetos.

DI: Dependências são injetadas automaticamente.

Beans: Objetos gerenciados pelo Spring.

Autowired: Injeta dependências automaticamente.

Scopes: Define o ciclo de vida dos Beans.